"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
function setupCharTable() {
    // For "clear" mode char table will be prepared as starting from blank
    const from = this.options.mode === 'clear' && this.state.finished
        ? ''
        : this.previousString;
    this.options.mode === 'matching'
        ? createMatchingCharTable.call(this, from)
        : createPreviousCharTable.call(this, from);
}
exports.default = setupCharTable;
function createMatchingCharTable(from) {
    const maxDist = Math.min(Math.ceil(this.options.genMaxGhosts / 2), 5), goalStringArray = getGoalStringArray.call(this, from);
    let pi = -1;
    goalStringArray.forEach((gl, gi) => {
        pi++;
        if (gl.type === 'tag') {
            pi--;
            this.setChar(gi, '', gl);
            return;
        }
        const fi = gl.value !== '' ? from.indexOf(gl.value, pi) : -1;
        if (fi !== -1 && fi - pi <= maxDist) {
            const appendedText = from.substring(pi, fi);
            this.setChar(gi, gl.value, gl, appendedText);
            pi = fi;
        }
        else
            this.setChar(gi, from[pi], gl);
    });
    this.removeExtraChars(goalStringArray.length);
}
function createPreviousCharTable(from) {
    const goalStringArray = getGoalStringArray.call(this, from);
    let pi = -1;
    goalStringArray.forEach((gl, gi) => {
        pi++;
        if (gl.type === 'tag') {
            pi--;
            this.setChar(gi, '', gl);
            return;
        }
        this.setChar(gi, from[pi], gl);
    });
    this.removeExtraChars(goalStringArray.length);
}
function getGoalStringArray(from) {
    const { options, goalText } = this, goalArray = options.html
        ? utils_1.htmlToArray(goalText)
        : utils_1.stringToLetterItems(goalText), diff = Math.max(0, from.length - goalArray.length);
    if (this.options.oneAtATime)
        return goalArray.concat(utils_1.stringToLetterItems(utils_1.arrayOfTheSame('', diff)));
    const nBefore = Math.ceil(diff / 2), nAfter = Math.floor(diff / 2);
    return utils_1.stringToLetterItems(utils_1.arrayOfTheSame('', nBefore)).concat(goalArray, utils_1.stringToLetterItems(utils_1.arrayOfTheSame('', nAfter)));
}
