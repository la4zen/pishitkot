import Options from './modules/options';
import State from './modules/state';
import Char from './modules/char';
import Emiter from './modules/emiter';
import { ConstructorOptions, WriterDataResponse, Callback, HTMLWriterElement } from './types';
import { wait, LetterItem } from './utils';
import { presets, glyphs, PresetName } from './presets';
export default class GlitchedWriter {
    htmlElement: HTMLWriterElement;
    options: Options;
    state: State;
    emiter: Emiter;
    charTable: Char[];
    goalText: string;
    lastText: string;
    string: string;
    /**
     * Create new instance of Glitched Writer, that manages writing text to one HTML Element. Few writers can possess the same HTML Element, but don't write with them at the same time.
     * Use .write(string) method to start writing.
     * @param htmlElement HTML Element OR a Selector string (eg. '.text')
     * @param options Options object (eg. { html: true, ... }) OR preset name (eg. 'zalgo').
     * @param onStepCallback Callback, that will be triggered on every step. Params passed: string & writer data.
     * @param onFinishCallback Callback, that will be triggered when each writing finishes. Params passed: string & writer data.
     */
    constructor(htmlElement?: HTMLElement | Element | null | string, options?: ConstructorOptions | PresetName | null, onStepCallback?: Callback, onFinishCallback?: Callback);
    /**
     * Function for updating multiple options at once. Unlike options setter, it doesn't reset not-passed fields to default state.
     * @param options Options object, with fields you want to change.
     */
    extendOptions(options: ConstructorOptions): void;
    setOptions(options: ConstructorOptions): void;
    set preset(preset: PresetName);
    updateString(): void;
    get previousString(): string;
    /**
     * All the data, about current state of the writer instance.
     */
    get writerData(): WriterDataResponse;
    /**
     * Main function of Glitched Writer. It orders writer to start typing passed string. Can be called multiple times after each other, or even during writing.
     * @param string text, that will get written.
     * @returns Promise, with writer data result
     */
    write(string: string): Promise<WriterDataResponse>;
    /**
     * Add text to end method. Orders writer to write same string as previous, but with this added at the end.
     * @param string text that will get added
     * @returns Promise, with writer data result
     */
    add(string: string): Promise<WriterDataResponse>;
    /**
     * Remove last n-letters method. Orders writer to write same string as previous, but without n-letters at the end.
     * @param n number of letters to remove.
     * @returns Promise, with writer data result
     */
    remove(n: number): Promise<WriterDataResponse>;
    /**
     * Resume last writing order.
     * @returns Promise, with writer data result
     */
    play(): Promise<WriterDataResponse>;
    /**
     * Pause current writer task.
     */
    pause(): void;
    private manageWriting;
    private preparePropertiesBeforeWrite;
    private playChT;
    private returnResult;
    removeExtraChars(from: number): void;
    setChar(ci: number, pl: string, gl: LetterItem, appendedText?: string): void;
    private getWriterData;
    private genGoalStringToErase;
}
/**
 * One time use, standalone write function. Used to order a temporary Glitched Writer instance to animate content of html element to chosen text.
 * @param string text, that will get written.
 * @param htmlElement HTML Element OR a Selector string (eg. '.text')
 * @param options Options object (eg. { html: true, ... }) OR preset name (eg. 'zalgo').
 * @param onStepCallback Callback, that will be triggered on every step. Params passed: string & writer data.
 * @param onFinishCallback Callback, that will be triggered when each writing finishes. Params passed: string & writer data.
 * @returns Promise, with writer data result
 */
export declare function glitchWrite(string: string, htmlElement?: HTMLElement | Element | null | string, options?: ConstructorOptions | PresetName | null, onStepCallback?: Callback, onFinishCallback?: Callback): Promise<WriterDataResponse>;
/**
 * A way to create new Writer without having to rely on defult export.
 * @param htmlElement HTML Element OR a Selector string (eg. '.text')
 * @param options Options object (eg. { html: true, ... }) OR preset name (eg. 'zalgo').
 * @param onStepCallback Callback, that will be triggered on every step. Params passed: string & writer data.
 * @param onFinishCallback Callback, that will be triggered when each writing finishes. Params passed: string & writer data.
 * @returns GlitchedWriter Class Instance
 */
export declare const create: (htmlElement?: string | Element | HTMLElement | null | undefined, options?: "default" | "encrypted" | ConstructorOptions | "nier" | "typewriter" | "terminal" | "zalgo" | "neo" | "bitbybit" | null | undefined, onStepCallback?: Callback | undefined, onFinishCallback?: Callback | undefined) => GlitchedWriter;
export { presets, glyphs, wait, ConstructorOptions, WriterDataResponse, Callback, };
