import { filterHtml } from '../utils';
export default class {
    constructor(writer, onStepCallback, onFinishCallback) {
        this.onStepCallback = onStepCallback;
        this.onFinishCallback = onFinishCallback;
        this.writer = writer;
    }
    call(eventType) {
        var _a, _b;
        this.writer.updateString();
        const { htmlElement, writerData, string } = this.writer;
        if (!this.writer.options.letterize) {
            if (this.writer.options.html)
                htmlElement.innerHTML = string;
            else
                htmlElement.textContent = string;
        }
        htmlElement.setAttribute('data-gw-string', this.writer.options.html ? filterHtml(string) : string);
        // ON STEP
        if (eventType === 'step')
            return (_a = this.onStepCallback) === null || _a === void 0 ? void 0 : _a.call(this, string, writerData);
        // ON FINISH
        this.writer.state.finish();
        // change state to finished but do not fire callbacks
        if (this.writer.state.erasing)
            return;
        (_b = this.onFinishCallback) === null || _b === void 0 ? void 0 : _b.call(this, string, writerData);
        this.emitEvent();
    }
    emitEvent() {
        const { htmlElement, writerData } = this.writer;
        if (typeof CustomEvent === 'undefined')
            return;
        htmlElement.dispatchEvent(new CustomEvent('gw-finished', { detail: writerData }));
    }
}
