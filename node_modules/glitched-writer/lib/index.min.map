{"version":3,"sources":["webpack://GlitchedWriter/webpack/universalModuleDefinition","webpack://GlitchedWriter/webpack/bootstrap","webpack://GlitchedWriter/webpack/runtime/define property getters","webpack://GlitchedWriter/webpack/runtime/hasOwnProperty shorthand","webpack://GlitchedWriter/webpack/runtime/make namespace object","webpack://GlitchedWriter/./lib/esm/utils.js","webpack://GlitchedWriter/./lib/esm/presets.js","webpack://GlitchedWriter/./lib/esm/modules/options.js","webpack://GlitchedWriter/./lib/esm/modules/state.js","webpack://GlitchedWriter/./lib/esm/modules/char.js","webpack://GlitchedWriter/./lib/esm/functions/setupCharTable.js","webpack://GlitchedWriter/./lib/esm/functions/letterize.js","webpack://GlitchedWriter/./lib/esm/functions/playlist/words.js","webpack://GlitchedWriter/./lib/esm/functions/playlist/letters.js","webpack://GlitchedWriter/./lib/esm/index.js","webpack://GlitchedWriter/./lib/esm/modules/emiter.js"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","random","min","max","math","result","Math","floor","round","ceil","deleteRandom","array","splice","length","wait","time","Promise","resolve","setTimeout","promiseWhile","conditionFunc","actionPromise","whilst","then","arrayOfTheSame","Array","fill","getRandomFromRange","range","undefined","coinFlip","p","letterToLetterItem","string","stringToLetterItems","map","findHTMLPattern","wordsRgx","filterHtml","reg","RegExp","replace","glyphs","nier","full","letterlike","zalgo","neo","uppercase","presets","default","steps","interval","initialDelay","changeChance","ghostChance","maxGhosts","oneAtATime","glyphsFromString","html","fillSpace","letterize","endless","mode","typewriter","terminal","encrypted","bitbybit","Options","writer","options","_a","_b","_c","_d","_e","_f","_g","_h","_j","_k","_l","_m","_o","this","Number","isInteger","document","glyphsString","input","join","from","parseCharset","setCharset","doFillSpace","space","goalText","iterable","ghostCharset","charset","isString","Set","forEach","x","push","filterDuplicates","previousString","filter","l","includes","State","nGhosts","progress","percent","done","todo","isTyping","isPaused","finished","erasing","genMaxGhosts","toggleClass","finish","enable","el","htmlElement","className","element","classList","remove","offsetWidth","add","animateWithClass","__awaiter","thisArg","_arguments","P","generator","reject","fulfilled","step","next","e","rejected","apply","Char","gl","initialGhosts","specialType","ghostsBefore","ghostsAfter","stop","afterGlitchChance","setProps","els","ghostsBeforeEl","createElement","letterEl","ghostsAfterEl","state","stepsLeft","isSpecialChar","char","goal","genInterval","innerHTML","textContent","charEl","appendChildren","append","writeToElement","emiter","increase","genInitDelay","lastString","ghostsInLimit","addGhost","removeGhost","ghost","insertGhost","ghostsArray","setupCharTable","createMatchingCharTable","createPreviousCharTable","maxDist","goalStringArray","getGoalStringArray","pi","gi","type","setChar","fi","indexOf","appendedText","substring","removeExtraChars","goalArray","resultArray","find","lastIndex","exec","index","to","stringBefore","slice","htmlToArray","diff","concat","nBefore","nAfter","charTable","spans","querySelectorAll","i","spanElement","prepWordsPlaylist","playList","indexes","wordArray","match","charGroups","ai","sgi","lastGroup","word","reverse","lastResult","ended","loop","group","pop","groupPromises","all","every","executor","prepLettersPlaylist","playOptions","charTableCopy","lastChar","n","GlitchedWriter","onStepCallback","onFinishCallback","lastText","querySelector","$writer","preset","setOptions","eventType","updateString","writerData","setAttribute","emitEvent","CustomEvent","dispatchEvent","detail","assign","prev","trim","manageWriting","write","pause","text","eraseTo","genGoalStringToErase","preparePropertiesBeforeWrite","playChT","getWriterData","reset","play","returnResult","error","ci","pl","status","message","previous","padEnd","glitchWrite","create"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GlitchedWriter\"] = factory();\n\telse\n\t\troot[\"GlitchedWriter\"] = factory();\n})(self, function() {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable no-unused-vars */\r\nexport function random(min, max, math) {\r\n    const result = Math.random() * (max - min) + min;\r\n    if (math) {\r\n        // eslint-disable-next-line default-case\r\n        switch (math) {\r\n            case 'floor':\r\n                return Math.floor(result);\r\n            case 'round':\r\n                return Math.round(result);\r\n            case 'ceil':\r\n                return Math.ceil(result);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport const clamp = (min, value, max) => Math.min(Math.max(value, min), max);\r\nexport const deleteRandom = (array) => array.splice(random(0, array.length, 'floor'), 1).length > 0;\r\nexport function getRandom(iterable) {\r\n    return iterable[random(0, iterable.length, 'floor')];\r\n}\r\nexport function filterDuplicates(iterable) {\r\n    const isString = typeof iterable === 'string', result = [];\r\n    new Set(iterable).forEach(x => result.push(x));\r\n    return isString ? result.join('') : result;\r\n}\r\nexport function parseCharset(input) {\r\n    let result;\r\n    // Charset is a string\r\n    if (typeof input === 'string')\r\n        result = input;\r\n    // Charset is an array\r\n    else if (input.length)\r\n        result = input.join('');\r\n    // Charset is a Set\r\n    else\r\n        result = Array.from(input).join('');\r\n    return result;\r\n}\r\nexport const wait = (time) => new Promise(resolve => setTimeout(() => resolve(time), time));\r\nexport function promiseWhile(conditionFunc, actionPromise) {\r\n    const whilst = () => conditionFunc() ? actionPromise().then(whilst) : Promise.resolve();\r\n    return whilst();\r\n}\r\nexport const arrayOfTheSame = (value, length) => new Array(length).fill(value);\r\nexport const isInRange = (min, value, max) => value >= min && value < max;\r\nexport const animateWithClass = (element, className) => {\r\n    element.classList.remove(className);\r\n    // eslint-disable-next-line no-void\r\n    void element.offsetWidth;\r\n    element.classList.add(className);\r\n};\r\nexport function getRandomFromRange(range, round = true) {\r\n    return typeof range === 'number'\r\n        ? range\r\n        : random(...range, round ? 'round' : undefined);\r\n}\r\nexport const coinFlip = (p = 0.5) => Math.random() < p;\r\nexport const letterToLetterItem = (string) => ({\r\n    value: string,\r\n});\r\nexport const stringToLetterItems = (string) => [...string].map(letterToLetterItem);\r\nexport const isSpecialChar = (l) => ['\\t', '\\n', '\\r', '\\f', '\\v', '', ' '].includes(l);\r\nconst findHTMLPattern = '(&(?:[a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});)|(<style.+?>.+?</style>|<script.+?>.+?</script>|<(?:!|/?[a-zA-Z]+).*?/?>)';\r\nexport const wordsRgx = /(&(?:[a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});)|.\\w+,*\\.*\"*\\s?|\\s+|\\S+/gi;\r\nexport function htmlToArray(string) {\r\n    const reg = new RegExp(findHTMLPattern, 'gi'), resultArray = [];\r\n    let find, lastIndex = 0;\r\n    // eslint-disable-next-line no-cond-assign\r\n    while ((find = reg.exec(string))) {\r\n        const from = find.index, to = reg.lastIndex, stringBefore = string.slice(lastIndex, from);\r\n        lastIndex = to;\r\n        stringBefore && resultArray.push(...stringToLetterItems(stringBefore));\r\n        const result = {\r\n            value: find[0],\r\n            type: find[1] !== undefined ? 'html_entity' : 'tag',\r\n        };\r\n        resultArray.push(result);\r\n    }\r\n    string.length > lastIndex &&\r\n        resultArray.push(...stringToLetterItems(string.slice(lastIndex)));\r\n    // return resultArray.map(l =>\r\n    // \tl.type\r\n    // \t\t? l\r\n    // \t\t: {\r\n    // \t\t\t\tvalue: l.value,\r\n    // \t\t\t\ttype: isSpecialChar(l.value) ? 'whitespace' : undefined,\r\n    // \t\t  },\r\n    // )\r\n    return resultArray;\r\n}\r\nexport function filterHtml(string) {\r\n    const reg = new RegExp(findHTMLPattern, 'g');\r\n    return string.replace(reg, '');\r\n}\r\nexport function trim(str, l) {\r\n    if (!l || l.length > 1 || !str)\r\n        return str;\r\n    if (l === ' ')\r\n        return str.trim();\r\n    const reg = new RegExp(`${l}+`, 'g');\r\n    let find, result = str;\r\n    // eslint-disable-next-line no-cond-assign\r\n    while ((find = reg.exec(str))) {\r\n        const from = find.index, to = reg.lastIndex, length = to - from;\r\n        if (from === 0)\r\n            result = result.substring(to);\r\n        else if (to === str.length)\r\n            result = result.substring(result.length - length);\r\n    }\r\n    return result;\r\n}\r\n","export const glyphs = {\r\n    nier: '一二三四五六七八九十百千上下左右中大小月日年早木林山川土空田天生花草虫犬人名女男子目耳口手足見音力気円入出立休先夕本文字学校村町森正水火玉王石竹糸貝車金雨赤青白数多少万半形太細広長点丸交光角計直線矢弱強高同親母父姉兄弟妹自友体毛頭顔首心時曜朝昼夜分週春夏秋冬今新古間方北南東西遠近前後内外場地国園谷野原里市京風雪雲池海岩星室戸家寺通門道話言答声聞語読書記紙画絵図工教晴思考知才理算作元食肉馬牛魚鳥羽鳴麦米茶色黄黒来行帰歩走止活店買売午汽弓回会組船明社切電毎合当台楽公引科歌刀番用何',\r\n    full: 'ABCDĐEFGHIJKLMNOPQRSTUVWXYZabcdđefghijklmnopqrstuvwxyzĄąĆćŻżŹźŃńóŁłАБВГҐДЂЕЁЄЖЗЅИІЇЙЈКЛЉМНЊОПРСТЋУЎФХЦЧЏШЩЪЫЬЭЮЯабвгґдђеёєжзѕиіїйјклљмнњопрстћуўфхцчџшщъыьэюяΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωάΆέΈέΉίϊΐΊόΌύΰϋΎΫΏĂÂÊÔƠƯăâêôơư一二三四五六七八九十百千上下左右中大小月日年早木林山川土空田天生花草虫犬人名女男子目耳口手足見音力気円入出立休先夕本文字学校村町森正水火玉王石竹糸貝車金雨赤青白数多少万半形太細広長点丸交光角計直線矢弱強高同親母父姉兄弟妹自友体毛頭顔首心時曜朝昼夜分週春夏秋冬今新古間方北南東西遠近前後内外場地国園谷野原里市京風雪雲池海岩星室戸家寺通門道話言答声聞語読書記紙画絵図工教晴思考知才理算作元食肉馬牛魚鳥羽鳴麦米茶色黄黒来行帰歩走止活店買売午汽弓回会組船明社切電毎合当台楽公引科歌刀番用何ĂÂÊÔƠƯăâêôơư1234567890‘?’“!”(%)[#]{@}/\\\\&<-+÷×=>$€£¥¢:;,.*•°·…±†‡æ«»¦¯—–~˜¨_øÞ¿▬▭▮▯┐└╛░▒▓○‼⁇⁈⁉‽ℴℵℶℷℸℲ℮ℯ⅁⅂⅃⅄₠₡₢₣₤₥₦₧₨₩₪₫€₭₮₯₰₱₲₳₴₵₶₷₸₹₺₻₼₽₾₿          ',\r\n    letterlike: 'ABCDĐEFGHIJKLMNOPQRSTUVWXYZabcdđefghijklmnopqrstuvwxyzĄąĆćŻżŹźŃńóŁłАБВГҐДЂЕЁЄЖЗЅИІЇЙЈКЛЉМНЊОПРСТЋУЎФХЦЧЏШЩЪЫЬЭЮЯабвгґдђеёєжзѕиіїйјклљмнњопрстћуўфхцчџшщъыьэюяΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωάΆέΈέΉίϊΐΊόΌύΰϋΎΫΏĂÂÊÔƠƯăâêôơưĂÂÊÔƠƯăâêôơư1234567890',\r\n    zalgo: '̴̵̶̷̸̡̢̧̨̛̖̗̘̙̜̝̞̟̠̣̤̥̦̩̪̫̬̭̮̯̰̱̲̳̹̺̻̼͇͈͉͍͎̀́̂̃̄̅̆̇̈̉̊̋̌̍̎̏̐̑̒̓̔̽̾̿̀́͂̓̈́͆͊͋͌̕̚ͅ ͓͔͕͖͙͚͐͑͒͗͛ͣͤͥͦͧͨͩͪͫͬͭͮͯ͘͜͟͢͝͞͠͡͏҉',\r\n    neo: '!<>-_\\\\/[]{}—=+*^?#________',\r\n    uppercase: '1234567890QWERTYUIOPASDFGHJKLZXCVBNM#$%',\r\n};\r\nexport const presets = {\r\n    default: {\r\n        steps: [1, 8],\r\n        interval: [60, 170],\r\n        initialDelay: [0, 2000],\r\n        changeChance: 0.6,\r\n        ghostChance: 0.2,\r\n        maxGhosts: 0.2,\r\n        oneAtATime: 0,\r\n        glyphs: glyphs.full + glyphs.zalgo,\r\n        glyphsFromString: false,\r\n        html: false,\r\n        fillSpace: true,\r\n        letterize: false,\r\n        endless: false,\r\n        mode: 'matching',\r\n    },\r\n    nier: {\r\n        maxGhosts: 0,\r\n        ghostChance: 0,\r\n        changeChance: 0.8,\r\n        steps: 3,\r\n        interval: 10,\r\n        initialDelay: 0,\r\n        oneAtATime: 1,\r\n        glyphs: glyphs.nier,\r\n        fillSpace: false,\r\n        glyphsFromString: true,\r\n        mode: 'clear',\r\n    },\r\n    typewriter: {\r\n        interval: [50, 150],\r\n        initialDelay: 0,\r\n        steps: 0,\r\n        changeChance: 0,\r\n        maxGhosts: 0,\r\n        oneAtATime: 1,\r\n        glyphs: '',\r\n        glyphsFromString: false,\r\n        fillSpace: false,\r\n        mode: 'erase',\r\n    },\r\n    terminal: {\r\n        interval: [25, 30],\r\n        initialDelay: [0, 0],\r\n        steps: 0,\r\n        changeChance: 0.5,\r\n        maxGhosts: 0,\r\n        oneAtATime: 1,\r\n        glyphs: '',\r\n        fillSpace: false,\r\n        glyphsFromString: false,\r\n        mode: 'clear',\r\n    },\r\n    zalgo: {\r\n        initialDelay: [0, 3000],\r\n        interval: [10, 35],\r\n        steps: [0, 30],\r\n        maxGhosts: 4.6,\r\n        changeChance: 0.5,\r\n        ghostChance: 0.7,\r\n        glyphs: glyphs.zalgo,\r\n        glyphsFromString: true,\r\n        fillSpace: false,\r\n    },\r\n    neo: {\r\n        interval: [30, 100],\r\n        initialDelay: [0, 1300],\r\n        steps: [4, 7],\r\n        maxGhosts: 0,\r\n        ghostChance: 0,\r\n        changeChance: 1,\r\n        glyphs: glyphs.neo,\r\n        mode: 'normal',\r\n    },\r\n    encrypted: {\r\n        interval: [50, 90],\r\n        initialDelay: [0, 1300],\r\n        steps: [5, 8],\r\n        maxGhosts: 0,\r\n        ghostChance: 0,\r\n        changeChance: 1,\r\n        glyphs: glyphs.uppercase,\r\n        fillSpace: false,\r\n        mode: 'normal',\r\n    },\r\n    bitbybit: {\r\n        interval: [35, 65],\r\n        initialDelay: 180,\r\n        steps: 1,\r\n        maxGhosts: 1,\r\n        ghostChance: 0.1,\r\n        changeChance: 0.7,\r\n        oneAtATime: 'word',\r\n        glyphs: '',\r\n        glyphsFromString: true,\r\n        fillSpace: false,\r\n        mode: 'erase',\r\n    },\r\n};\r\n","// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport { parseCharset, filterDuplicates, getRandomFromRange, filterHtml, getRandom, } from '../utils';\r\nimport { presets } from '../presets';\r\nexport default class Options {\r\n    constructor(writer, options) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\r\n        this.steps = (_a = options.steps) !== null && _a !== void 0 ? _a : presets.default.steps;\r\n        this.interval = (_b = options.interval) !== null && _b !== void 0 ? _b : presets.default.interval;\r\n        this.initialDelay = (_c = options.initialDelay) !== null && _c !== void 0 ? _c : presets.default.initialDelay;\r\n        this.changeChance = (_d = options.changeChance) !== null && _d !== void 0 ? _d : presets.default.changeChance;\r\n        this.ghostChance = (_e = options.ghostChance) !== null && _e !== void 0 ? _e : presets.default.ghostChance;\r\n        this.maxGhosts = (_f = options.maxGhosts) !== null && _f !== void 0 ? _f : presets.default.maxGhosts;\r\n        this.glyphs = (_g = options.glyphs) !== null && _g !== void 0 ? _g : presets.default.glyphs;\r\n        this.glyphsFromString =\r\n            (_h = options.glyphsFromString) !== null && _h !== void 0 ? _h : presets.default.glyphsFromString;\r\n        if (Number.isInteger(options.oneAtATime))\r\n            this.oneAtATime = options.oneAtATime;\r\n        else if (options.oneAtATime === 'word')\r\n            this.oneAtATime = 'word';\r\n        else\r\n            this.oneAtATime = options.oneAtATime ? 1 : 0;\r\n        this.html = (_j = options.html) !== null && _j !== void 0 ? _j : presets.default.html;\r\n        this.letterize = (_k = options.letterize) !== null && _k !== void 0 ? _k : presets.default.letterize;\r\n        if (typeof document === 'undefined')\r\n            this.letterize = false;\r\n        this.endless = (_l = options.endless) !== null && _l !== void 0 ? _l : presets.default.endless;\r\n        this.mode = (_m = options.mode) !== null && _m !== void 0 ? _m : presets.default.mode;\r\n        this.writer = writer;\r\n        this.fillSpace = (_o = options.fillSpace) !== null && _o !== void 0 ? _o : presets.default.fillSpace;\r\n    }\r\n    set glyphs(glyphs) {\r\n        this.glyphsString = parseCharset(glyphs);\r\n        this.setCharset();\r\n    }\r\n    set fillSpace(doFillSpace) {\r\n        this.space = doFillSpace ? ' ' : '';\r\n    }\r\n    get stepsLeft() {\r\n        return getRandomFromRange(this.steps);\r\n    }\r\n    get genInterval() {\r\n        return getRandomFromRange(this.interval);\r\n    }\r\n    get genInitDelay() {\r\n        return getRandomFromRange(this.initialDelay);\r\n    }\r\n    get genMaxGhosts() {\r\n        if (Number.isInteger(this.maxGhosts))\r\n            return this.maxGhosts;\r\n        let length;\r\n        if (this.writer.options.html)\r\n            length = filterHtml(this.writer.goalText).length;\r\n        else\r\n            length = this.writer.goalText.length;\r\n        return Math.round((length || 20) * this.maxGhosts);\r\n    }\r\n    get ghost() {\r\n        var _a;\r\n        return (_a = getRandom(this.ghostCharset)) !== null && _a !== void 0 ? _a : '';\r\n    }\r\n    setCharset() {\r\n        let charset = this.glyphsString;\r\n        if (this.glyphsFromString)\r\n            charset += filterDuplicates(this.writer.previousString +\r\n                (this.writer.options.html\r\n                    ? filterHtml(this.writer.goalText)\r\n                    : this.writer.goalText));\r\n        this.ghostCharset = [...charset].filter(l => !['\\t', '\\n', '\\r', '\\f', '\\v'].includes(l));\r\n    }\r\n}\r\n","import { animateWithClass } from '../utils';\r\nexport default class State {\r\n    constructor(writer) {\r\n        this.nGhosts = 0;\r\n        /**\r\n         * Numerical data about progress of writing\r\n         */\r\n        this.progress = {\r\n            percent: 0,\r\n            done: 0,\r\n            todo: 0,\r\n            increase() {\r\n                this.done++;\r\n                this.percent = this.done / this.todo;\r\n            },\r\n            reset(todo) {\r\n                this.percent = 0;\r\n                this.done = 0;\r\n                this.todo = todo;\r\n            },\r\n            finish() {\r\n                this.done = this.todo;\r\n                this.percent = 1;\r\n            },\r\n        };\r\n        this.isTyping = false;\r\n        this.isPaused = false;\r\n        this.finished = true;\r\n        this.erasing = false;\r\n        this.writer = writer;\r\n        this.maxGhosts = this.writer.options.genMaxGhosts;\r\n    }\r\n    get ghostsInLimit() {\r\n        return this.nGhosts < this.maxGhosts;\r\n    }\r\n    play() {\r\n        this.isTyping = true;\r\n        this.isPaused = false;\r\n        this.finished = false;\r\n        this.toggleClass(true);\r\n        this.maxGhosts = this.writer.options.genMaxGhosts;\r\n    }\r\n    pause() {\r\n        this.isTyping = false;\r\n        this.isPaused = true;\r\n        this.toggleClass(false);\r\n    }\r\n    finish() {\r\n        this.progress.finish();\r\n        this.isTyping = false;\r\n        this.finished = true;\r\n        this.toggleClass(false);\r\n    }\r\n    toggleClass(enable) {\r\n        const el = this.writer.htmlElement, className = 'gw-writing';\r\n        enable ? animateWithClass(el, className) : el.classList.remove(className);\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { random, deleteRandom, wait, promiseWhile, coinFlip, isSpecialChar, } from '../utils';\r\nexport default class Char {\r\n    constructor(writer, l, gl, initialGhosts = '', specialType) {\r\n        this.ghostsBefore = [];\r\n        this.ghostsAfter = [];\r\n        this.stop = false;\r\n        this.afterGlitchChance = 0;\r\n        this.writer = writer;\r\n        this.setProps(l, gl, initialGhosts, specialType);\r\n        if (writer.options.letterize) {\r\n            this.els = {\r\n                ghostsBeforeEl: document.createElement('span'),\r\n                letterEl: document.createElement('span'),\r\n                ghostsAfterEl: document.createElement('span'),\r\n            };\r\n            this.els.ghostsBeforeEl.className = 'gw-ghosts';\r\n            this.els.ghostsAfterEl.className = 'gw-ghosts';\r\n            this.els.letterEl.className = 'gw-letter';\r\n        }\r\n    }\r\n    setProps(l, gl, initialGhosts = '', specialType) {\r\n        const { options } = this.writer;\r\n        this.l = l;\r\n        this.gl = gl;\r\n        this.specialType = specialType;\r\n        this.ghostsBefore = [...initialGhosts];\r\n        this.writer.state.nGhosts += initialGhosts.length;\r\n        this.stepsLeft = options.stepsLeft;\r\n        if (specialType === 'tag')\r\n            this.stepsLeft = 0;\r\n        else if (isSpecialChar(gl))\r\n            this.specialType = 'whitespace';\r\n        this.afterGlitchChance =\r\n            (options.ghostChance + options.changeChance) / 3.7;\r\n    }\r\n    reset(l, gl, initialGhosts = '', specialType) {\r\n        this.setProps(l, gl, initialGhosts, specialType);\r\n        if (this.els)\r\n            this.els.letterEl.className = 'gw-letter';\r\n    }\r\n    get string() {\r\n        const { l: char, ghostsAfter, ghostsBefore } = this;\r\n        return ghostsBefore.join('') + char + ghostsAfter.join('');\r\n    }\r\n    get finished() {\r\n        const { l: char, gl: goal, ghostsBefore, ghostsAfter } = this;\r\n        return ((char === goal &&\r\n            ghostsBefore.length === 0 &&\r\n            ghostsAfter.length === 0) ||\r\n            this.specialType === 'tag');\r\n    }\r\n    get interval() {\r\n        let interval = this.writer.options.genInterval;\r\n        if (this.specialType === 'whitespace')\r\n            interval /= 1.8;\r\n        return interval;\r\n    }\r\n    writeToElement() {\r\n        if (!this.els)\r\n            return;\r\n        const { ghostsBeforeEl, ghostsAfterEl, letterEl } = this.els;\r\n        letterEl.innerHTML = this.l;\r\n        ghostsBeforeEl.textContent = this.ghostsBefore.join('');\r\n        ghostsAfterEl.textContent = this.ghostsAfter.join('');\r\n    }\r\n    set spanElement(el) {\r\n        if (!this.els)\r\n            return;\r\n        this.els.charEl = el;\r\n        this.appendChildren();\r\n    }\r\n    appendChildren() {\r\n        var _a, _b;\r\n        (_b = (_a = this.els) === null || _a === void 0 ? void 0 : _a.charEl) === null || _b === void 0 ? void 0 : _b.append(this.els.ghostsBeforeEl, this.els.letterEl, this.els.ghostsAfterEl);\r\n        this.writeToElement();\r\n    }\r\n    type() {\r\n        var _a, _b, _c;\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { writer } = this;\r\n            if (this.specialType === 'tag') {\r\n                this.l = this.gl;\r\n                writer.emiter.call('step');\r\n                writer.state.progress.increase();\r\n                return true;\r\n            }\r\n            const loop = () => __awaiter(this, void 0, void 0, function* () {\r\n                yield wait(this.interval);\r\n                const lastString = this.string;\r\n                this.step();\r\n                if (lastString !== this.string) {\r\n                    writer.emiter.call('step');\r\n                    this.writeToElement();\r\n                }\r\n                !writer.options.endless && this.stepsLeft--;\r\n            });\r\n            yield wait(writer.options.genInitDelay);\r\n            yield promiseWhile(() => (!this.finished || writer.options.endless) &&\r\n                !writer.state.isPaused &&\r\n                !this.stop, loop);\r\n            if (this.finished) {\r\n                writer.state.progress.increase();\r\n                (_b = (_a = this.els) === null || _a === void 0 ? void 0 : _a.charEl) === null || _b === void 0 ? void 0 : _b.classList.add('gw-finished');\r\n                (_c = this.els) === null || _c === void 0 ? void 0 : _c.letterEl.classList.remove('gw-glitched');\r\n            }\r\n            return this.finished;\r\n        });\r\n    }\r\n    step() {\r\n        var _a, _b;\r\n        const { writer } = this;\r\n        if ((this.stepsLeft > 0 && this.l !== this.gl) ||\r\n            (coinFlip(this.afterGlitchChance) &&\r\n                this.specialType !== 'whitespace') ||\r\n            writer.options.endless) {\r\n            /**\r\n             * IS GROWING\r\n             */\r\n            const { ghostChance, changeChance } = writer.options;\r\n            if (coinFlip(ghostChance)) {\r\n                if (writer.state.ghostsInLimit)\r\n                    this.addGhost();\r\n                else\r\n                    this.removeGhost();\r\n            }\r\n            if (coinFlip(changeChance)) {\r\n                (_a = this.els) === null || _a === void 0 ? void 0 : _a.letterEl.classList.add('gw-glitched');\r\n                this.l = writer.options.ghost;\r\n            }\r\n        }\r\n        else if (!this.finished) {\r\n            /**\r\n             * IS SHRINKING\r\n             */\r\n            (_b = this.els) === null || _b === void 0 ? void 0 : _b.letterEl.classList.remove('gw-glitched');\r\n            this.l = this.gl;\r\n            this.removeGhost();\r\n        }\r\n    }\r\n    addGhost() {\r\n        const l = this.writer.options.ghost;\r\n        this.writer.state.nGhosts++;\r\n        coinFlip()\r\n            ? insertGhost(this.ghostsBefore, l)\r\n            : insertGhost(this.ghostsAfter, l);\r\n    }\r\n    removeGhost() {\r\n        const deleted = coinFlip() && this.ghostsBefore.length > 0\r\n            ? deleteRandom(this.ghostsBefore)\r\n            : deleteRandom(this.ghostsAfter);\r\n        if (deleted)\r\n            this.writer.state.nGhosts--;\r\n    }\r\n}\r\nfunction insertGhost(ghostsArray, ghost) {\r\n    const { length } = ghostsArray;\r\n    ghostsArray.splice(random(0, length, 'floor'), 0, ghost);\r\n}\r\n","import { arrayOfTheSame, htmlToArray, stringToLetterItems, } from '../utils';\r\nexport default function setupCharTable() {\r\n    // For \"clear\" mode char table will be prepared as starting from blank\r\n    const from = this.options.mode === 'clear' && this.state.finished\r\n        ? ''\r\n        : this.previousString;\r\n    this.options.mode === 'matching'\r\n        ? createMatchingCharTable.call(this, from)\r\n        : createPreviousCharTable.call(this, from);\r\n}\r\nfunction createMatchingCharTable(from) {\r\n    const maxDist = Math.min(Math.ceil(this.options.genMaxGhosts / 2), 5), goalStringArray = getGoalStringArray.call(this, from);\r\n    let pi = -1;\r\n    goalStringArray.forEach((gl, gi) => {\r\n        pi++;\r\n        if (gl.type === 'tag') {\r\n            pi--;\r\n            this.setChar(gi, '', gl);\r\n            return;\r\n        }\r\n        const fi = gl.value !== '' ? from.indexOf(gl.value, pi) : -1;\r\n        if (fi !== -1 && fi - pi <= maxDist) {\r\n            const appendedText = from.substring(pi, fi);\r\n            this.setChar(gi, gl.value, gl, appendedText);\r\n            pi = fi;\r\n        }\r\n        else\r\n            this.setChar(gi, from[pi], gl);\r\n    });\r\n    this.removeExtraChars(goalStringArray.length);\r\n}\r\nfunction createPreviousCharTable(from) {\r\n    const goalStringArray = getGoalStringArray.call(this, from);\r\n    let pi = -1;\r\n    goalStringArray.forEach((gl, gi) => {\r\n        pi++;\r\n        if (gl.type === 'tag') {\r\n            pi--;\r\n            this.setChar(gi, '', gl);\r\n            return;\r\n        }\r\n        this.setChar(gi, from[pi], gl);\r\n    });\r\n    this.removeExtraChars(goalStringArray.length);\r\n}\r\nfunction getGoalStringArray(from) {\r\n    const { options, goalText } = this, goalArray = options.html\r\n        ? htmlToArray(goalText)\r\n        : stringToLetterItems(goalText), diff = Math.max(0, from.length - goalArray.length);\r\n    if (this.options.oneAtATime)\r\n        return goalArray.concat(stringToLetterItems(arrayOfTheSame('', diff)));\r\n    const nBefore = Math.ceil(diff / 2), nAfter = Math.floor(diff / 2);\r\n    return stringToLetterItems(arrayOfTheSame('', nBefore)).concat(goalArray, stringToLetterItems(arrayOfTheSame('', nAfter)));\r\n}\r\n","export default function letterize() {\r\n    if (!this.options.letterize)\r\n        return;\r\n    const html = this.charTable\r\n        .map(({ specialType, gl }) => specialType === 'tag' ? gl : '<span class=\"gw-char\"></span>')\r\n        .join('');\r\n    this.htmlElement.innerHTML = html;\r\n    const spans = this.htmlElement.querySelectorAll('span.gw-char');\r\n    let i = 0;\r\n    this.charTable.forEach(char => {\r\n        if (char.specialType === 'tag')\r\n            return;\r\n        char.spanElement = spans[i];\r\n        i++;\r\n    });\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { promiseWhile, wordsRgx } from '../../utils';\r\n/**\r\n * ONE WORD AT A TIME\r\n */\r\nexport default function prepWordsPlaylist(playList) {\r\n    const { charTable, state } = this;\r\n    // indexes of chars in chartable that are normal letters\r\n    const indexes = [];\r\n    let wordArray;\r\n    /**\r\n     * Scope for separating words\r\n     */\r\n    {\r\n        const filteredTable = charTable.filter((char, i) => {\r\n            if (char.specialType === 'tag' ||\r\n                char.specialType === 'html_entity')\r\n                return false;\r\n            indexes.push(i);\r\n            return true;\r\n        }), \r\n        // I want to only find words in the normal text\r\n        text = filteredTable.map(char => char.gl).join('');\r\n        wordArray = text.match(wordsRgx);\r\n    }\r\n    /**\r\n     * Scope for greating groups\r\n     */\r\n    const charGroups = [];\r\n    {\r\n        // set of index variables\r\n        // fi - index of (not) filtered chars\r\n        // gi - index of all chars\r\n        // sgi - steady gi - for detecting when gi grows more than 1\r\n        let fi = -1, ai = -1, sgi = -1;\r\n        const lastGroup = () => charGroups[charGroups.length - 1];\r\n        wordArray === null || wordArray === void 0 ? void 0 : wordArray.forEach(word => {\r\n            charGroups.push([]);\r\n            [...word].forEach(() => {\r\n                fi++;\r\n                ai = indexes[fi];\r\n                sgi++;\r\n                // handling filtered chars before current char\r\n                if (sgi !== ai) {\r\n                    for (let i = sgi; i < ai; i++) {\r\n                        lastGroup().push(charTable[i]);\r\n                    }\r\n                    sgi = ai;\r\n                }\r\n                lastGroup().push(charTable[ai]);\r\n            });\r\n        });\r\n        // Adds the rest of the chartable chars\r\n        if (!charGroups.length)\r\n            charGroups.push([]);\r\n        for (let i = ai + 1; i < charTable.length; i++) {\r\n            lastGroup().push(charTable[i]);\r\n        }\r\n    }\r\n    // so i can use .pop() and get the first group\r\n    charGroups.reverse();\r\n    let lastResult = true, ended = false;\r\n    const loop = () => __awaiter(this, void 0, void 0, function* () {\r\n        var _a;\r\n        const group = charGroups.pop();\r\n        if (!group)\r\n            return (ended = true);\r\n        const groupPromises = group.map(char => char.type());\r\n        lastResult =\r\n            (_a = (yield Promise.all(groupPromises)).every(result => result)) !== null && _a !== void 0 ? _a : false;\r\n    });\r\n    const executor = () => __awaiter(this, void 0, void 0, function* () {\r\n        yield promiseWhile(() => !ended && lastResult && !state.isPaused, loop);\r\n        return ended && lastResult && !state.isPaused;\r\n    });\r\n    playList.push(executor());\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nimport { promiseWhile } from '../../utils';\r\nexport default function prepLettersPlaylist(playList, playOptions) {\r\n    var _a;\r\n    const { charTable, state, options } = this, reverse = (_a = playOptions === null || playOptions === void 0 ? void 0 : playOptions.reverse) !== null && _a !== void 0 ? _a : false, charTableCopy = reverse ? [...charTable] : [...charTable].reverse();\r\n    // Char executor - runs a loop, typing one char at a time\r\n    // It is possible to run multiple of them at the same time\r\n    const executor = () => __awaiter(this, void 0, void 0, function* () {\r\n        let lastResult = true, ended = false;\r\n        const loop = () => __awaiter(this, void 0, void 0, function* () {\r\n            var _b;\r\n            const lastChar = charTableCopy.pop();\r\n            if (!lastChar)\r\n                ended = true;\r\n            else\r\n                lastResult = (_b = (yield lastChar.type())) !== null && _b !== void 0 ? _b : false;\r\n        });\r\n        yield promiseWhile(() => !ended && lastResult && !state.isPaused, loop);\r\n        return ended && lastResult && !state.isPaused;\r\n    });\r\n    // Add as many executors as needed to the playList\r\n    for (let n = 0; n < options.oneAtATime; n++) {\r\n        playList.push(executor());\r\n    }\r\n}\r\n","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n// eslint-disable-next-line import/no-extraneous-dependencies\r\nimport Options from './modules/options';\r\nimport State from './modules/state';\r\nimport Char from './modules/char';\r\nimport Emiter from './modules/emiter';\r\nimport { wait, filterHtml } from './utils';\r\nimport { presets, glyphs } from './presets';\r\nimport setupCharTable from './functions/setupCharTable';\r\nimport letterize from './functions/letterize';\r\nimport prepWordsPlaylist from './functions/playlist/words';\r\nimport prepLettersPlaylist from './functions/playlist/letters';\r\nexport default class GlitchedWriter {\r\n    /**\r\n     * Create new instance of Glitched Writer, that manages writing text to one HTML Element. Few writers can possess the same HTML Element, but don't write with them at the same time.\r\n     * Use .write(string) method to start writing.\r\n     * @param htmlElement HTML Element OR a Selector string (eg. '.text')\r\n     * @param options Options object (eg. { html: true, ... }) OR preset name (eg. 'zalgo').\r\n     * @param onStepCallback Callback, that will be triggered on every step. Params passed: string & writer data.\r\n     * @param onFinishCallback Callback, that will be triggered when each writing finishes. Params passed: string & writer data.\r\n     */\r\n    constructor(htmlElement, options, onStepCallback, onFinishCallback) {\r\n        var _a;\r\n        this.charTable = [];\r\n        this.goalText = '';\r\n        this.lastText = '';\r\n        this.string = '';\r\n        if (!htmlElement)\r\n            this.htmlElement = document.createElement('span');\r\n        else if (typeof htmlElement === 'string') {\r\n            this.htmlElement =\r\n                (_a = document.querySelector(htmlElement)) !== null && _a !== void 0 ? _a : document.createElement('span');\r\n        }\r\n        else\r\n            this.htmlElement = htmlElement;\r\n        if (this.htmlElement)\r\n            this.htmlElement.$writer = this;\r\n        if (typeof options === 'string')\r\n            this.preset = options;\r\n        else\r\n            this.setOptions(options !== null && options !== void 0 ? options : {});\r\n        this.state = new State(this);\r\n        this.emiter = new Emiter(this, onStepCallback, onFinishCallback);\r\n        this.string = this.previousString;\r\n    }\r\n    /**\r\n     * Function for updating multiple options at once. Unlike options setter, it doesn't reset not-passed fields to default state.\r\n     * @param options Options object, with fields you want to change.\r\n     */\r\n    extendOptions(options) {\r\n        this.setOptions(Object.assign(Object.assign({}, this.options), options));\r\n    }\r\n    setOptions(options) {\r\n        this.options = new Options(this, options);\r\n    }\r\n    set preset(preset) {\r\n        this.options = new Options(this, presets[preset]);\r\n    }\r\n    updateString() {\r\n        this.string = this.charTable.map(char => char.string).join('');\r\n    }\r\n    get previousString() {\r\n        let prev = this.htmlElement.textContent;\r\n        if (typeof prev !== 'string')\r\n            prev = this.options.html ? filterHtml(this.string) : this.string;\r\n        prev = prev.trim();\r\n        return prev;\r\n    }\r\n    /**\r\n     * All the data, about current state of the writer instance.\r\n     */\r\n    get writerData() {\r\n        const writer = this, { options, state, string } = this;\r\n        return {\r\n            string,\r\n            writer,\r\n            options,\r\n            state,\r\n        };\r\n    }\r\n    /**\r\n     * Main function of Glitched Writer. It orders writer to start typing passed string. Can be called multiple times after each other, or even during writing.\r\n     * @param string text, that will get written.\r\n     * @returns Promise, with writer data result\r\n     */\r\n    write(string) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.manageWriting(string);\r\n        });\r\n    }\r\n    /**\r\n     * Add text to end method. Orders writer to write same string as previous, but with this added at the end.\r\n     * @param string text that will get added\r\n     * @returns Promise, with writer data result\r\n     */\r\n    add(string) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { previousString } = this;\r\n            return this.write(previousString + string);\r\n        });\r\n    }\r\n    /**\r\n     * Remove last n-letters method. Orders writer to write same string as previous, but without n-letters at the end.\r\n     * @param n number of letters to remove.\r\n     * @returns Promise, with writer data result\r\n     */\r\n    remove(n) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const { previousString } = this, array = Array.from(previousString);\r\n            array.splice(-n);\r\n            // return this.write(array.join(''), { erase: true })\r\n            return this.write(array.join(''));\r\n        });\r\n    }\r\n    // private logCharTable() {\r\n    // \tconsole.table(\r\n    // \t\tthis.charTable.map(\r\n    // \t\t\t({ ghostsBefore, ghostsAfter, l, gl, isTag, isWhitespace }) => [\r\n    // \t\t\t\tghostsBefore.join(''),\r\n    // \t\t\t\tghostsAfter.join(''),\r\n    // \t\t\t\tl,\r\n    // \t\t\t\tgl,\r\n    // \t\t\t\t(isTag && 'TAG') || (isWhitespace && 'Whitespace'),\r\n    // \t\t\t],\r\n    // \t\t),\r\n    // \t)\r\n    // }\r\n    /**\r\n     * Resume last writing order.\r\n     * @returns Promise, with writer data result\r\n     */\r\n    play() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.manageWriting(null);\r\n        });\r\n    }\r\n    /**\r\n     * Pause current writer task.\r\n     */\r\n    pause() {\r\n        this.state.pause();\r\n    }\r\n    manageWriting(text) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            if (text !== null)\r\n                this.lastText = text;\r\n            // Erasing first\r\n            if (this.options.mode === 'erase' &&\r\n                (this.state.finished || this.state.erasing)) {\r\n                this.state.erasing = true;\r\n                const eraseTo = this.genGoalStringToErase(this.lastText);\r\n                this.preparePropertiesBeforeWrite(eraseTo);\r\n                yield this.playChT({\r\n                    reverse: this.options.oneAtATime !== 0,\r\n                });\r\n                // If erasing did not finish for some reason\r\n                // Like it was paused\r\n                if (!this.state.finished)\r\n                    return this.getWriterData('ERROR', 'Erasing did not finish.');\r\n                this.state.erasing = false;\r\n            }\r\n            this.preparePropertiesBeforeWrite(this.lastText);\r\n            // this.logCharTable()\r\n            this.pause();\r\n            return this.playChT();\r\n        });\r\n    }\r\n    preparePropertiesBeforeWrite(text) {\r\n        /* PREPARE PROPERTIES */\r\n        this.goalText = text;\r\n        this.state.nGhosts = 0;\r\n        this.options.setCharset();\r\n        setupCharTable.call(this);\r\n        this.state.progress.reset(this.charTable.length);\r\n        letterize.call(this);\r\n    }\r\n    playChT(playOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const playList = [], { charTable, state, options } = this;\r\n            if (state.isTyping)\r\n                return this.getWriterData('ERROR', `The writer is already typing.`);\r\n            state.play();\r\n            // N LETTERS AT A TIME\r\n            if (options.oneAtATime > 0)\r\n                prepLettersPlaylist.call(this, playList, playOptions);\r\n            // BY WORDS\r\n            else if (options.oneAtATime === 'word')\r\n                prepWordsPlaylist.call(this, playList);\r\n            // NORMAL\r\n            else\r\n                charTable.forEach(char => playList.push(char.type()));\r\n            /**\r\n             * Play Playlist\r\n             * and return the result\r\n             */\r\n            try {\r\n                const finished = (yield Promise.all(playList)).every(result => result);\r\n                return this.returnResult(finished);\r\n            }\r\n            catch (error) {\r\n                return this.getWriterData('ERROR', 'Writer encountered an error.', error);\r\n            }\r\n        });\r\n    }\r\n    returnResult(finished) {\r\n        finished ? this.emiter.call('finish') : this.emiter.call('step');\r\n        return finished\r\n            ? this.getWriterData('SUCCESS', `The writer finished typing.`)\r\n            : this.getWriterData('ERROR', `Writer failed to finish typing.`);\r\n    }\r\n    removeExtraChars(from) {\r\n        const { charTable } = this;\r\n        charTable.splice(from, charTable.length - from);\r\n    }\r\n    setChar(ci, pl, gl, appendedText) {\r\n        const { charTable } = this, char = charTable[ci];\r\n        char\r\n            ? char.reset(pl !== null && pl !== void 0 ? pl : '', gl.value || this.options.space, appendedText, gl.type)\r\n            : charTable.push(new Char(this, pl !== null && pl !== void 0 ? pl : '', gl.value || this.options.space, appendedText, gl.type));\r\n    }\r\n    getWriterData(status, message, error) {\r\n        const { writerData } = this;\r\n        return Object.assign(Object.assign({}, writerData), { status,\r\n            message,\r\n            error });\r\n    }\r\n    genGoalStringToErase(goal) {\r\n        var _a;\r\n        const { previousString: previous } = this;\r\n        let result = '';\r\n        for (let i = 0; i < goal.length; i++) {\r\n            const gl = goal[i], pl = (_a = previous[i]) !== null && _a !== void 0 ? _a : '';\r\n            if (gl === pl)\r\n                result += pl;\r\n            else\r\n                break;\r\n        }\r\n        const diff = Math.max(goal.length - result.length, 0);\r\n        if (diff > 0 && this.options.space === ' ')\r\n            result = result.padEnd(diff + result.length, ' ');\r\n        return result;\r\n    }\r\n}\r\n/**\r\n * One time use, standalone write function. Used to order a temporary Glitched Writer instance to animate content of html element to chosen text.\r\n * @param string text, that will get written.\r\n * @param htmlElement HTML Element OR a Selector string (eg. '.text')\r\n * @param options Options object (eg. { html: true, ... }) OR preset name (eg. 'zalgo').\r\n * @param onStepCallback Callback, that will be triggered on every step. Params passed: string & writer data.\r\n * @param onFinishCallback Callback, that will be triggered when each writing finishes. Params passed: string & writer data.\r\n * @returns Promise, with writer data result\r\n */\r\nexport function glitchWrite(string, htmlElement, options, onStepCallback, onFinishCallback) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        const writer = new GlitchedWriter(htmlElement, options, onStepCallback, onFinishCallback);\r\n        return writer.write(string);\r\n    });\r\n}\r\n/**\r\n * A way to create new Writer without having to rely on defult export.\r\n * @param htmlElement HTML Element OR a Selector string (eg. '.text')\r\n * @param options Options object (eg. { html: true, ... }) OR preset name (eg. 'zalgo').\r\n * @param onStepCallback Callback, that will be triggered on every step. Params passed: string & writer data.\r\n * @param onFinishCallback Callback, that will be triggered when each writing finishes. Params passed: string & writer data.\r\n * @returns GlitchedWriter Class Instance\r\n */\r\nexport const create = (htmlElement, options, onStepCallback, onFinishCallback) => new GlitchedWriter(htmlElement, options, onStepCallback, onFinishCallback);\r\nexport { presets, glyphs, wait, };\r\n","import { filterHtml } from '../utils';\r\nexport default class {\r\n    constructor(writer, onStepCallback, onFinishCallback) {\r\n        this.onStepCallback = onStepCallback;\r\n        this.onFinishCallback = onFinishCallback;\r\n        this.writer = writer;\r\n    }\r\n    call(eventType) {\r\n        var _a, _b;\r\n        this.writer.updateString();\r\n        const { htmlElement, writerData, string } = this.writer;\r\n        if (!this.writer.options.letterize) {\r\n            if (this.writer.options.html)\r\n                htmlElement.innerHTML = string;\r\n            else\r\n                htmlElement.textContent = string;\r\n        }\r\n        htmlElement.setAttribute('data-gw-string', this.writer.options.html ? filterHtml(string) : string);\r\n        // ON STEP\r\n        if (eventType === 'step')\r\n            return (_a = this.onStepCallback) === null || _a === void 0 ? void 0 : _a.call(this, string, writerData);\r\n        // ON FINISH\r\n        this.writer.state.finish();\r\n        // change state to finished but do not fire callbacks\r\n        if (this.writer.state.erasing)\r\n            return;\r\n        (_b = this.onFinishCallback) === null || _b === void 0 ? void 0 : _b.call(this, string, writerData);\r\n        this.emitEvent();\r\n    }\r\n    emitEvent() {\r\n        const { htmlElement, writerData } = this.writer;\r\n        if (typeof CustomEvent === 'undefined')\r\n            return;\r\n        htmlElement.dispatchEvent(new CustomEvent('gw-finished', { detail: writerData }));\r\n    }\r\n}\r\n"],"sourceRoot":""}